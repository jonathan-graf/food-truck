/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FoodTruckPermit } from '../models';
import { PageImplFoodTruckPermit } from '../models';
import { RestTemplate } from '../models';
/**
 * SodaApiControllerApi - axios parameter creator
 * @export
 */
export const SodaApiControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} size 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFoodTruckPermits: async (size: number, page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling getAllFoodTruckPermits.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getAllFoodTruckPermits.');
            }
            const localVarPath = `/permits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoodTruckPermitById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getFoodTruckPermitById.');
            }
            const localVarPath = `/permits/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RestTemplate} restTemplate 
         * @param {string} input 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFoodTruckPermit: async (restTemplate: RestTemplate, input: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restTemplate' is not null or undefined
            if (restTemplate === null || restTemplate === undefined) {
                throw new RequiredError('restTemplate','Required parameter restTemplate was null or undefined when calling searchFoodTruckPermit.');
            }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input','Required parameter input was null or undefined when calling searchFoodTruckPermit.');
            }
            const localVarPath = `/permits/search/{input}`
                .replace(`{${"input"}}`, encodeURIComponent(String(input)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (restTemplate !== undefined) {
                localVarQueryParameter['restTemplate'] = restTemplate;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} statusInput 
         * @param {number} size 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFoodTruckPermitByStatus: async (statusInput: Array<string>, size: number, page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statusInput' is not null or undefined
            if (statusInput === null || statusInput === undefined) {
                throw new RequiredError('statusInput','Required parameter statusInput was null or undefined when calling searchFoodTruckPermitByStatus.');
            }
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling searchFoodTruckPermitByStatus.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling searchFoodTruckPermitByStatus.');
            }
            const localVarPath = `/permits/status/{statusInput}`
                .replace(`{${"statusInput"}}`, encodeURIComponent(String(statusInput)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} input 
         * @param {Array<string>} statusInput 
         * @param {number} size 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFoodTruckPermitByTextAndStatus: async (input: string, statusInput: Array<string>, size: number, page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input','Required parameter input was null or undefined when calling searchFoodTruckPermitByTextAndStatus.');
            }
            // verify required parameter 'statusInput' is not null or undefined
            if (statusInput === null || statusInput === undefined) {
                throw new RequiredError('statusInput','Required parameter statusInput was null or undefined when calling searchFoodTruckPermitByTextAndStatus.');
            }
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling searchFoodTruckPermitByTextAndStatus.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling searchFoodTruckPermitByTextAndStatus.');
            }
            const localVarPath = `/permits/search/{input}/status/{statusInput}`
                .replace(`{${"input"}}`, encodeURIComponent(String(input)))
                .replace(`{${"statusInput"}}`, encodeURIComponent(String(statusInput)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SodaApiControllerApi - functional programming interface
 * @export
 */
export const SodaApiControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} size 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFoodTruckPermits(size: number, page: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageImplFoodTruckPermit>>> {
            const localVarAxiosArgs = await SodaApiControllerApiAxiosParamCreator(configuration).getAllFoodTruckPermits(size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoodTruckPermitById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FoodTruckPermit>>> {
            const localVarAxiosArgs = await SodaApiControllerApiAxiosParamCreator(configuration).getFoodTruckPermitById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {RestTemplate} restTemplate 
         * @param {string} input 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFoodTruckPermit(restTemplate: RestTemplate, input: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageImplFoodTruckPermit>>> {
            const localVarAxiosArgs = await SodaApiControllerApiAxiosParamCreator(configuration).searchFoodTruckPermit(restTemplate, input, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array<string>} statusInput 
         * @param {number} size 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFoodTruckPermitByStatus(statusInput: Array<string>, size: number, page: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageImplFoodTruckPermit>>> {
            const localVarAxiosArgs = await SodaApiControllerApiAxiosParamCreator(configuration).searchFoodTruckPermitByStatus(statusInput, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} input 
         * @param {Array<string>} statusInput 
         * @param {number} size 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFoodTruckPermitByTextAndStatus(input: string, statusInput: Array<string>, size: number, page: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageImplFoodTruckPermit>>> {
            const localVarAxiosArgs = await SodaApiControllerApiAxiosParamCreator(configuration).searchFoodTruckPermitByTextAndStatus(input, statusInput, size, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SodaApiControllerApi - factory interface
 * @export
 */
export const SodaApiControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} size 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFoodTruckPermits(size: number, page: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PageImplFoodTruckPermit>> {
            return SodaApiControllerApiFp(configuration).getAllFoodTruckPermits(size, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoodTruckPermitById(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<FoodTruckPermit>> {
            return SodaApiControllerApiFp(configuration).getFoodTruckPermitById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RestTemplate} restTemplate 
         * @param {string} input 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFoodTruckPermit(restTemplate: RestTemplate, input: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PageImplFoodTruckPermit>> {
            return SodaApiControllerApiFp(configuration).searchFoodTruckPermit(restTemplate, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} statusInput 
         * @param {number} size 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFoodTruckPermitByStatus(statusInput: Array<string>, size: number, page: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PageImplFoodTruckPermit>> {
            return SodaApiControllerApiFp(configuration).searchFoodTruckPermitByStatus(statusInput, size, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} input 
         * @param {Array<string>} statusInput 
         * @param {number} size 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFoodTruckPermitByTextAndStatus(input: string, statusInput: Array<string>, size: number, page: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PageImplFoodTruckPermit>> {
            return SodaApiControllerApiFp(configuration).searchFoodTruckPermitByTextAndStatus(input, statusInput, size, page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SodaApiControllerApi - object-oriented interface
 * @export
 * @class SodaApiControllerApi
 * @extends {BaseAPI}
 */
export class SodaApiControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} size 
     * @param {number} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SodaApiControllerApi
     */
    public async getAllFoodTruckPermits(size: number, page: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageImplFoodTruckPermit>> {
        return SodaApiControllerApiFp(this.configuration).getAllFoodTruckPermits(size, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SodaApiControllerApi
     */
    public async getFoodTruckPermitById(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<FoodTruckPermit>> {
        return SodaApiControllerApiFp(this.configuration).getFoodTruckPermitById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {RestTemplate} restTemplate 
     * @param {string} input 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SodaApiControllerApi
     */
    public async searchFoodTruckPermit(restTemplate: RestTemplate, input: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageImplFoodTruckPermit>> {
        return SodaApiControllerApiFp(this.configuration).searchFoodTruckPermit(restTemplate, input, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Array<string>} statusInput 
     * @param {number} size 
     * @param {number} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SodaApiControllerApi
     */
    public async searchFoodTruckPermitByStatus(statusInput: Array<string>, size: number, page: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageImplFoodTruckPermit>> {
        return SodaApiControllerApiFp(this.configuration).searchFoodTruckPermitByStatus(statusInput, size, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} input 
     * @param {Array<string>} statusInput 
     * @param {number} size 
     * @param {number} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SodaApiControllerApi
     */
    public async searchFoodTruckPermitByTextAndStatus(input: string, statusInput: Array<string>, size: number, page: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageImplFoodTruckPermit>> {
        return SodaApiControllerApiFp(this.configuration).searchFoodTruckPermitByTextAndStatus(input, statusInput, size, page, options).then((request) => request(this.axios, this.basePath));
    }
}
